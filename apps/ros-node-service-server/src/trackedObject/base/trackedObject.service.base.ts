/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, TrackedObject as PrismaTrackedObject } from "@prisma/client";

export class TrackedObjectServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TrackedObjectCountArgs, "select">
  ): Promise<number> {
    return this.prisma.trackedObject.count(args);
  }

  async trackedObjects(
    args: Prisma.TrackedObjectFindManyArgs
  ): Promise<PrismaTrackedObject[]> {
    return this.prisma.trackedObject.findMany(args);
  }
  async trackedObject(
    args: Prisma.TrackedObjectFindUniqueArgs
  ): Promise<PrismaTrackedObject | null> {
    return this.prisma.trackedObject.findUnique(args);
  }
  async createTrackedObject(
    args: Prisma.TrackedObjectCreateArgs
  ): Promise<PrismaTrackedObject> {
    return this.prisma.trackedObject.create(args);
  }
  async updateTrackedObject(
    args: Prisma.TrackedObjectUpdateArgs
  ): Promise<PrismaTrackedObject> {
    return this.prisma.trackedObject.update(args);
  }
  async deleteTrackedObject(
    args: Prisma.TrackedObjectDeleteArgs
  ): Promise<PrismaTrackedObject> {
    return this.prisma.trackedObject.delete(args);
  }
}
