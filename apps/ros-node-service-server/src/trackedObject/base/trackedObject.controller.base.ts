/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TrackedObjectService } from "../trackedObject.service";
import { TrackedObjectCreateInput } from "./TrackedObjectCreateInput";
import { TrackedObject } from "./TrackedObject";
import { TrackedObjectFindManyArgs } from "./TrackedObjectFindManyArgs";
import { TrackedObjectWhereUniqueInput } from "./TrackedObjectWhereUniqueInput";
import { TrackedObjectUpdateInput } from "./TrackedObjectUpdateInput";

export class TrackedObjectControllerBase {
  constructor(protected readonly service: TrackedObjectService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TrackedObject })
  async createTrackedObject(
    @common.Body() data: TrackedObjectCreateInput
  ): Promise<TrackedObject> {
    return await this.service.createTrackedObject({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        relX: true,
        relY: true,
        rotRelZ: true,
        egoWidth: true,
        objClose: true,
        absDistClose: true,
        objectLength: true,
        objectWidth: true,
        angleObj: true,
        angleEgo: true,
        egoLength: true,
        egoVelX: true,
        egoVehAccX: true,
        objectVelX: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TrackedObject] })
  @ApiNestedQuery(TrackedObjectFindManyArgs)
  async trackedObjects(
    @common.Req() request: Request
  ): Promise<TrackedObject[]> {
    const args = plainToClass(TrackedObjectFindManyArgs, request.query);
    return this.service.trackedObjects({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        relX: true,
        relY: true,
        rotRelZ: true,
        egoWidth: true,
        objClose: true,
        absDistClose: true,
        objectLength: true,
        objectWidth: true,
        angleObj: true,
        angleEgo: true,
        egoLength: true,
        egoVelX: true,
        egoVehAccX: true,
        objectVelX: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TrackedObject })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async trackedObject(
    @common.Param() params: TrackedObjectWhereUniqueInput
  ): Promise<TrackedObject | null> {
    const result = await this.service.trackedObject({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        relX: true,
        relY: true,
        rotRelZ: true,
        egoWidth: true,
        objClose: true,
        absDistClose: true,
        objectLength: true,
        objectWidth: true,
        angleObj: true,
        angleEgo: true,
        egoLength: true,
        egoVelX: true,
        egoVehAccX: true,
        objectVelX: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TrackedObject })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTrackedObject(
    @common.Param() params: TrackedObjectWhereUniqueInput,
    @common.Body() data: TrackedObjectUpdateInput
  ): Promise<TrackedObject | null> {
    try {
      return await this.service.updateTrackedObject({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          relX: true,
          relY: true,
          rotRelZ: true,
          egoWidth: true,
          objClose: true,
          absDistClose: true,
          objectLength: true,
          objectWidth: true,
          angleObj: true,
          angleEgo: true,
          egoLength: true,
          egoVelX: true,
          egoVehAccX: true,
          objectVelX: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TrackedObject })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTrackedObject(
    @common.Param() params: TrackedObjectWhereUniqueInput
  ): Promise<TrackedObject | null> {
    try {
      return await this.service.deleteTrackedObject({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          relX: true,
          relY: true,
          rotRelZ: true,
          egoWidth: true,
          objClose: true,
          absDistClose: true,
          objectLength: true,
          objectWidth: true,
          angleObj: true,
          angleEgo: true,
          egoLength: true,
          egoVelX: true,
          egoVehAccX: true,
          objectVelX: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
