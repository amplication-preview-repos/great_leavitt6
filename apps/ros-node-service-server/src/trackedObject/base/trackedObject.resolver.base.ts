/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TrackedObject } from "./TrackedObject";
import { TrackedObjectCountArgs } from "./TrackedObjectCountArgs";
import { TrackedObjectFindManyArgs } from "./TrackedObjectFindManyArgs";
import { TrackedObjectFindUniqueArgs } from "./TrackedObjectFindUniqueArgs";
import { CreateTrackedObjectArgs } from "./CreateTrackedObjectArgs";
import { UpdateTrackedObjectArgs } from "./UpdateTrackedObjectArgs";
import { DeleteTrackedObjectArgs } from "./DeleteTrackedObjectArgs";
import { TrackedObjectService } from "../trackedObject.service";
@graphql.Resolver(() => TrackedObject)
export class TrackedObjectResolverBase {
  constructor(protected readonly service: TrackedObjectService) {}

  async _trackedObjectsMeta(
    @graphql.Args() args: TrackedObjectCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TrackedObject])
  async trackedObjects(
    @graphql.Args() args: TrackedObjectFindManyArgs
  ): Promise<TrackedObject[]> {
    return this.service.trackedObjects(args);
  }

  @graphql.Query(() => TrackedObject, { nullable: true })
  async trackedObject(
    @graphql.Args() args: TrackedObjectFindUniqueArgs
  ): Promise<TrackedObject | null> {
    const result = await this.service.trackedObject(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TrackedObject)
  async createTrackedObject(
    @graphql.Args() args: CreateTrackedObjectArgs
  ): Promise<TrackedObject> {
    return await this.service.createTrackedObject({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => TrackedObject)
  async updateTrackedObject(
    @graphql.Args() args: UpdateTrackedObjectArgs
  ): Promise<TrackedObject | null> {
    try {
      return await this.service.updateTrackedObject({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TrackedObject)
  async deleteTrackedObject(
    @graphql.Args() args: DeleteTrackedObjectArgs
  ): Promise<TrackedObject | null> {
    try {
      return await this.service.deleteTrackedObject(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
