/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CriticMetric } from "./CriticMetric";
import { CriticMetricCountArgs } from "./CriticMetricCountArgs";
import { CriticMetricFindManyArgs } from "./CriticMetricFindManyArgs";
import { CriticMetricFindUniqueArgs } from "./CriticMetricFindUniqueArgs";
import { CreateCriticMetricArgs } from "./CreateCriticMetricArgs";
import { UpdateCriticMetricArgs } from "./UpdateCriticMetricArgs";
import { DeleteCriticMetricArgs } from "./DeleteCriticMetricArgs";
import { CriticMetricService } from "../criticMetric.service";
@graphql.Resolver(() => CriticMetric)
export class CriticMetricResolverBase {
  constructor(protected readonly service: CriticMetricService) {}

  async _criticMetricsMeta(
    @graphql.Args() args: CriticMetricCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CriticMetric])
  async criticMetrics(
    @graphql.Args() args: CriticMetricFindManyArgs
  ): Promise<CriticMetric[]> {
    return this.service.criticMetrics(args);
  }

  @graphql.Query(() => CriticMetric, { nullable: true })
  async criticMetric(
    @graphql.Args() args: CriticMetricFindUniqueArgs
  ): Promise<CriticMetric | null> {
    const result = await this.service.criticMetric(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CriticMetric)
  async createCriticMetric(
    @graphql.Args() args: CreateCriticMetricArgs
  ): Promise<CriticMetric> {
    return await this.service.createCriticMetric({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CriticMetric)
  async updateCriticMetric(
    @graphql.Args() args: UpdateCriticMetricArgs
  ): Promise<CriticMetric | null> {
    try {
      return await this.service.updateCriticMetric({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CriticMetric)
  async deleteCriticMetric(
    @graphql.Args() args: DeleteCriticMetricArgs
  ): Promise<CriticMetric | null> {
    try {
      return await this.service.deleteCriticMetric(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
