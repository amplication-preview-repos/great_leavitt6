/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CriticMetricService } from "../criticMetric.service";
import { CriticMetricCreateInput } from "./CriticMetricCreateInput";
import { CriticMetric } from "./CriticMetric";
import { CriticMetricFindManyArgs } from "./CriticMetricFindManyArgs";
import { CriticMetricWhereUniqueInput } from "./CriticMetricWhereUniqueInput";
import { CriticMetricUpdateInput } from "./CriticMetricUpdateInput";

export class CriticMetricControllerBase {
  constructor(protected readonly service: CriticMetricService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CriticMetric })
  async createCriticMetric(
    @common.Body() data: CriticMetricCreateInput
  ): Promise<CriticMetric> {
    return await this.service.createCriticMetric({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        ttcaObject: true,
        ttcaPassEgo: true,
        ttcaEgo: true,
        ttcStationaryobject: true,
        ttcValue: true,
        psd: true,
        tStop: true,
        egoVehAccX: true,
        relativeX: true,
        relativeY: true,
        egoVelX: true,
        objectVelX: true,
        objectName: true,
        objectLength: true,
        objectWidth: true,
        egoLength: true,
        egoWidth: true,
        angleEgo: true,
        ttcaPassObject: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CriticMetric] })
  @ApiNestedQuery(CriticMetricFindManyArgs)
  async criticMetrics(@common.Req() request: Request): Promise<CriticMetric[]> {
    const args = plainToClass(CriticMetricFindManyArgs, request.query);
    return this.service.criticMetrics({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        ttcaObject: true,
        ttcaPassEgo: true,
        ttcaEgo: true,
        ttcStationaryobject: true,
        ttcValue: true,
        psd: true,
        tStop: true,
        egoVehAccX: true,
        relativeX: true,
        relativeY: true,
        egoVelX: true,
        objectVelX: true,
        objectName: true,
        objectLength: true,
        objectWidth: true,
        egoLength: true,
        egoWidth: true,
        angleEgo: true,
        ttcaPassObject: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CriticMetric })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async criticMetric(
    @common.Param() params: CriticMetricWhereUniqueInput
  ): Promise<CriticMetric | null> {
    const result = await this.service.criticMetric({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        ttcaObject: true,
        ttcaPassEgo: true,
        ttcaEgo: true,
        ttcStationaryobject: true,
        ttcValue: true,
        psd: true,
        tStop: true,
        egoVehAccX: true,
        relativeX: true,
        relativeY: true,
        egoVelX: true,
        objectVelX: true,
        objectName: true,
        objectLength: true,
        objectWidth: true,
        egoLength: true,
        egoWidth: true,
        angleEgo: true,
        ttcaPassObject: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CriticMetric })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCriticMetric(
    @common.Param() params: CriticMetricWhereUniqueInput,
    @common.Body() data: CriticMetricUpdateInput
  ): Promise<CriticMetric | null> {
    try {
      return await this.service.updateCriticMetric({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          ttcaObject: true,
          ttcaPassEgo: true,
          ttcaEgo: true,
          ttcStationaryobject: true,
          ttcValue: true,
          psd: true,
          tStop: true,
          egoVehAccX: true,
          relativeX: true,
          relativeY: true,
          egoVelX: true,
          objectVelX: true,
          objectName: true,
          objectLength: true,
          objectWidth: true,
          egoLength: true,
          egoWidth: true,
          angleEgo: true,
          ttcaPassObject: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CriticMetric })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCriticMetric(
    @common.Param() params: CriticMetricWhereUniqueInput
  ): Promise<CriticMetric | null> {
    try {
      return await this.service.deleteCriticMetric({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          ttcaObject: true,
          ttcaPassEgo: true,
          ttcaEgo: true,
          ttcStationaryobject: true,
          ttcValue: true,
          psd: true,
          tStop: true,
          egoVehAccX: true,
          relativeX: true,
          relativeY: true,
          egoVelX: true,
          objectVelX: true,
          objectName: true,
          objectLength: true,
          objectWidth: true,
          egoLength: true,
          egoWidth: true,
          angleEgo: true,
          ttcaPassObject: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
