/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, CriticMetric as PrismaCriticMetric } from "@prisma/client";

export class CriticMetricServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CriticMetricCountArgs, "select">
  ): Promise<number> {
    return this.prisma.criticMetric.count(args);
  }

  async criticMetrics(
    args: Prisma.CriticMetricFindManyArgs
  ): Promise<PrismaCriticMetric[]> {
    return this.prisma.criticMetric.findMany(args);
  }
  async criticMetric(
    args: Prisma.CriticMetricFindUniqueArgs
  ): Promise<PrismaCriticMetric | null> {
    return this.prisma.criticMetric.findUnique(args);
  }
  async createCriticMetric(
    args: Prisma.CriticMetricCreateArgs
  ): Promise<PrismaCriticMetric> {
    return this.prisma.criticMetric.create(args);
  }
  async updateCriticMetric(
    args: Prisma.CriticMetricUpdateArgs
  ): Promise<PrismaCriticMetric> {
    return this.prisma.criticMetric.update(args);
  }
  async deleteCriticMetric(
    args: Prisma.CriticMetricDeleteArgs
  ): Promise<PrismaCriticMetric> {
    return this.prisma.criticMetric.delete(args);
  }
}
