/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, VehicleState as PrismaVehicleState } from "@prisma/client";

export class VehicleStateServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.VehicleStateCountArgs, "select">
  ): Promise<number> {
    return this.prisma.vehicleState.count(args);
  }

  async vehicleStates(
    args: Prisma.VehicleStateFindManyArgs
  ): Promise<PrismaVehicleState[]> {
    return this.prisma.vehicleState.findMany(args);
  }
  async vehicleState(
    args: Prisma.VehicleStateFindUniqueArgs
  ): Promise<PrismaVehicleState | null> {
    return this.prisma.vehicleState.findUnique(args);
  }
  async createVehicleState(
    args: Prisma.VehicleStateCreateArgs
  ): Promise<PrismaVehicleState> {
    return this.prisma.vehicleState.create(args);
  }
  async updateVehicleState(
    args: Prisma.VehicleStateUpdateArgs
  ): Promise<PrismaVehicleState> {
    return this.prisma.vehicleState.update(args);
  }
  async deleteVehicleState(
    args: Prisma.VehicleStateDeleteArgs
  ): Promise<PrismaVehicleState> {
    return this.prisma.vehicleState.delete(args);
  }
}
