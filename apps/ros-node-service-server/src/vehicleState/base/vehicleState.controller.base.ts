/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { VehicleStateService } from "../vehicleState.service";
import { VehicleStateCreateInput } from "./VehicleStateCreateInput";
import { VehicleState } from "./VehicleState";
import { VehicleStateFindManyArgs } from "./VehicleStateFindManyArgs";
import { VehicleStateWhereUniqueInput } from "./VehicleStateWhereUniqueInput";
import { VehicleStateUpdateInput } from "./VehicleStateUpdateInput";

export class VehicleStateControllerBase {
  constructor(protected readonly service: VehicleStateService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: VehicleState })
  async createVehicleState(
    @common.Body() data: VehicleStateCreateInput
  ): Promise<VehicleState> {
    return await this.service.createVehicleState({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        steeringAngle: true,
        positionX: true,
        positionY: true,
        orientationZ: true,
        steeringDirection: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [VehicleState] })
  @ApiNestedQuery(VehicleStateFindManyArgs)
  async vehicleStates(@common.Req() request: Request): Promise<VehicleState[]> {
    const args = plainToClass(VehicleStateFindManyArgs, request.query);
    return this.service.vehicleStates({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        steeringAngle: true,
        positionX: true,
        positionY: true,
        orientationZ: true,
        steeringDirection: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: VehicleState })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async vehicleState(
    @common.Param() params: VehicleStateWhereUniqueInput
  ): Promise<VehicleState | null> {
    const result = await this.service.vehicleState({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        steeringAngle: true,
        positionX: true,
        positionY: true,
        orientationZ: true,
        steeringDirection: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: VehicleState })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateVehicleState(
    @common.Param() params: VehicleStateWhereUniqueInput,
    @common.Body() data: VehicleStateUpdateInput
  ): Promise<VehicleState | null> {
    try {
      return await this.service.updateVehicleState({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          steeringAngle: true,
          positionX: true,
          positionY: true,
          orientationZ: true,
          steeringDirection: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: VehicleState })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteVehicleState(
    @common.Param() params: VehicleStateWhereUniqueInput
  ): Promise<VehicleState | null> {
    try {
      return await this.service.deleteVehicleState({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          steeringAngle: true,
          positionX: true,
          positionY: true,
          orientationZ: true,
          steeringDirection: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
