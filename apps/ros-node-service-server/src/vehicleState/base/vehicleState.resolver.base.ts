/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { VehicleState } from "./VehicleState";
import { VehicleStateCountArgs } from "./VehicleStateCountArgs";
import { VehicleStateFindManyArgs } from "./VehicleStateFindManyArgs";
import { VehicleStateFindUniqueArgs } from "./VehicleStateFindUniqueArgs";
import { CreateVehicleStateArgs } from "./CreateVehicleStateArgs";
import { UpdateVehicleStateArgs } from "./UpdateVehicleStateArgs";
import { DeleteVehicleStateArgs } from "./DeleteVehicleStateArgs";
import { VehicleStateService } from "../vehicleState.service";
@graphql.Resolver(() => VehicleState)
export class VehicleStateResolverBase {
  constructor(protected readonly service: VehicleStateService) {}

  async _vehicleStatesMeta(
    @graphql.Args() args: VehicleStateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [VehicleState])
  async vehicleStates(
    @graphql.Args() args: VehicleStateFindManyArgs
  ): Promise<VehicleState[]> {
    return this.service.vehicleStates(args);
  }

  @graphql.Query(() => VehicleState, { nullable: true })
  async vehicleState(
    @graphql.Args() args: VehicleStateFindUniqueArgs
  ): Promise<VehicleState | null> {
    const result = await this.service.vehicleState(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => VehicleState)
  async createVehicleState(
    @graphql.Args() args: CreateVehicleStateArgs
  ): Promise<VehicleState> {
    return await this.service.createVehicleState({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => VehicleState)
  async updateVehicleState(
    @graphql.Args() args: UpdateVehicleStateArgs
  ): Promise<VehicleState | null> {
    try {
      return await this.service.updateVehicleState({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => VehicleState)
  async deleteVehicleState(
    @graphql.Args() args: DeleteVehicleStateArgs
  ): Promise<VehicleState | null> {
    try {
      return await this.service.deleteVehicleState(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
